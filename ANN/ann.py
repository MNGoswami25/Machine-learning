import numpy as np         #numpy for numerical computations and array operations.
import tensorflow as tf      # tensorflow for building and training neural networks.
from tensorflow import keras   #keras (from TensorFlow) for high-level neural network APIs.
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler  #StandardScaler from sklearn.preprocessing for feature scaling.

# Generate some random data for demonstration
np.random.seed(42)
X = np.random.rand(100, 2)  #(100 samples of 2-dimensional random data),
# generates the target labels for the binary classification problem based on whether the sum of the two input features for each data point is greater than 1 or not. It creates a dataset where the model learns to classify points based on this threshold condition
y = (X[:, 0] + X[:, 1] > 1).astype(int)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Build the ANN model

#model has an input layer with 2 input neurons (corresponding to the two features of the input data), a hidden layer with 4 neurons and ReLU activation, and an output layer with 1 neuron and sigmoid activation.
# The model architecture follows the pattern Input -> Hidden Layer -> Output, which is common for simple feedforward neural networks used for binary classification.

model = keras.Sequential([
    keras.layers.Dense(units=4, activation='relu', input_shape=(2,)),
    keras.layers.Dense(units=1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=8, verbose=1)  # The resulting loss and accuracy are printed to the console.

#"verbose" refers to the level of detail and amount of information that a program or system outputs during its execution
#verbose=0: No logging output during training.
#verbose=1: Default behavior. Progress bars for each epoch.
#verbose=2: One line per epoch, displaying the progress. .

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test_scaled, y_test)   #The output you're seeing is automatically generated by TensorFlow and Keras to provide you with information about the training progress
print("Test accuracy:",accuracy)